(set-option :produce-unsat-cores true)
(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-option :produce-models true)
(set-option :AUTO_CONFIG false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :smt.QI.COST |"(+ weight generation)"|)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun %lbl%+92 () Bool)
(declare-fun x@0 () Int)
(declare-fun x@1 () Int)
(declare-fun y@1 () Int)
(declare-fun y@0 () Int)
(declare-fun %lbl%@259 () Bool)
(declare-fun AbsHoudiniConstant2 () Bool)
(declare-fun %lbl%+94 () Bool)
(declare-fun %lbl%@227 () Bool)
(declare-fun n () Int)
(declare-fun %lbl%+90 () Bool)
(declare-fun %lbl%+212 () Bool)
(declare-fun AbsHoudiniConstant1 () Bool)
(declare-fun %lbl%+88 () Bool)
(declare-fun %lbl%@196 () Bool)
(declare-fun AbsHoudiniConstant0 () Bool)
(declare-fun %lbl%+166 () Bool)
(define-fun mainMacro () Bool (let ((anon3_LoopBody_correct (=> (! (and %lbl%+92 true) :lblpos +92) (=> (> x@0 0) (=> (and
(= x@1 (- x@0 1))
(= y@1 (+ y@0 1))) (and
(! (or %lbl%@259 (=> true AbsHoudiniConstant2)) :lblneg @259)
(=> (=> true AbsHoudiniConstant2) true)))))))
(let ((anon3_LoopDone_correct (=> (! (and %lbl%+94 true) :lblpos +94) (=> (>= 0 x@0) (and
(! (or %lbl%@227 (=> true (= y@0 n))) :lblneg @227)
(=> (=> true (= y@0 n)) true))))))
(let ((anon3_LoopHead_correct (=> (! (and %lbl%+90 true) :lblpos +90) (=> (! (and %lbl%+212 AbsHoudiniConstant1) :lblpos +212) (and
anon3_LoopDone_correct
anon3_LoopBody_correct)))))
(let ((anon0_correct (=> (! (and %lbl%+88 true) :lblpos +88) (=> (>= n 0) (and
(! (or %lbl%@196 (=> true AbsHoudiniConstant0)) :lblneg @196)
(=> (=> true AbsHoudiniConstant0) anon3_LoopHead_correct))))))
(let ((PreconditionGeneratedEntry_correct (=> (! (and %lbl%+166 true) :lblpos +166) anon0_correct)))
PreconditionGeneratedEntry_correct))))))
(declare-fun b0 (Int Int Int Int) Bool)
(assert (or
true
(b0 n 0 n (+ n 0))))
(assert (or
true
(b0 x@0 y@0 n (+ x@0 y@0))))
(assert (or
true
(b0 x@1 y@1 n (+ x@1 y@1))))
(push 1)
(assert (not (=> (and
(<= n 2)
(>= n (- 0 2))
(<= 0 2)
(>= 0 (- 0 2))
(<= n 2)
(>= n (- 0 2))
(<= (+ n 0) 2)
(>= (+ n 0) (- 0 2))
(<= x@0 2)
(>= x@0 (- 0 2))
(<= y@0 2)
(>= y@0 (- 0 2))
(<= n 2)
(>= n (- 0 2))
(<= (+ x@0 y@0) 2)
(>= (+ x@0 y@0) (- 0 2))
(<= x@1 2)
(>= x@1 (- 0 2))
(<= y@1 2)
(>= y@1 (- 0 2))
(<= n 2)
(>= n (- 0 2))
(<= (+ x@1 y@1) 2)
(>= (+ x@1 y@1) (- 0 2))) (=> (and
(=> AbsHoudiniConstant0 true)
(=> true AbsHoudiniConstant0)
(=> AbsHoudiniConstant1 true)
(=> true AbsHoudiniConstant1)
(=> AbsHoudiniConstant2 true)
(=> true AbsHoudiniConstant2)) mainMacro))))
(check-sat)
(labels)
(get-model)
(get-value ((+ x@0 y@0)))
(get-value ((+ x@0 y@0)))
(assert %lbl%@227)
(check-sat)
(pop 1)
(push 1)
(define-fun mainNegMacro0 () Bool (let ((anon3_LoopDone_correct@@0 (=> (! (and %lbl%+94 true) :lblpos +94) (=> (>= 0 x@0) (and
(! (or %lbl%@227 (=> true (= y@0 n))) :lblneg @227)
(=> (=> true (= y@0 n)) true))))))
(let ((anon3_LoopHead_correct@@0 (=> (! (and %lbl%+90 true) :lblpos +90) (=> (! (and %lbl%+212 AbsHoudiniConstant1) :lblpos +212) anon3_LoopDone_correct@@0))))
anon3_LoopHead_correct@@0)))
(assert mainNegMacro0)
(assert (and (not %lbl%@227) %lbl%+90 %lbl%+212 %lbl%+94))
(declare-const p0 Bool)
(assert (=> p0 (= x@0 0)))
(declare-const p1 Bool)
(assert (=> p1 (= y@0 2)))
(declare-const p2 Bool)
(assert (=> p2 (= n 0)))
(assert  (and
(=> AbsHoudiniConstant0 true)
(=> true AbsHoudiniConstant0)
(=> AbsHoudiniConstant1 true)
(=> true AbsHoudiniConstant1)
(=> AbsHoudiniConstant2 true)
(=> true AbsHoudiniConstant2)) )
(check-sat p0 p1 p2 )
(get-unsat-core)
(pop 1)
(push 1)
(assert (not (=> (and
(<= n 2)
(>= n (- 0 2))
(<= 0 2)
(>= 0 (- 0 2))
(<= n 2)
(>= n (- 0 2))
(<= (+ n 0) 2)
(>= (+ n 0) (- 0 2))
(<= x@0 2)
(>= x@0 (- 0 2))
(<= y@0 2)
(>= y@0 (- 0 2))
(<= n 2)
(>= n (- 0 2))
(<= (+ x@0 y@0) 2)
(>= (+ x@0 y@0) (- 0 2))
(<= x@1 2)
(>= x@1 (- 0 2))
(<= y@1 2)
(>= y@1 (- 0 2))
(<= n 2)
(>= n (- 0 2))
(<= (+ x@1 y@1) 2)
(>= (+ x@1 y@1) (- 0 2))) (=> (and
(=> AbsHoudiniConstant0 false)
(=> false AbsHoudiniConstant0)
(=> AbsHoudiniConstant1 false)
(=> false AbsHoudiniConstant1)
(=> AbsHoudiniConstant2 false)
(=> false AbsHoudiniConstant2)) mainMacro))))
(check-sat)
(labels)
(get-model)
(get-value ((+ n 0)))
(get-value ((+ n 0)))
(assert %lbl%@196)
(check-sat)
(pop 1)
(push 1)
(define-fun mainPosMacro1 () Bool (let ((anon0_correct@@0 (=> (! (and %lbl%+88 true) :lblpos +88) (=> (>= n 0) (and
(! (or %lbl%@196 (=> true AbsHoudiniConstant0)) :lblneg @196)
(=> (=> true AbsHoudiniConstant0) true))))))
(let ((PreconditionGeneratedEntry_correct@@0 (=> (! (and %lbl%+166 true) :lblpos +166) anon0_correct@@0)))
PreconditionGeneratedEntry_correct@@0)))
(assert mainPosMacro1)
(assert (and (not %lbl%@196) %lbl%+166 %lbl%+88))
(declare-const p0 Bool)
(assert (=> p0 (= n 0)))
(assert  (and
(=> AbsHoudiniConstant0 false)
(=> false AbsHoudiniConstant0)
(=> AbsHoudiniConstant1 false)
(=> false AbsHoudiniConstant1)
(=> AbsHoudiniConstant2 false)
(=> false AbsHoudiniConstant2)) )
(check-sat p0 )
(get-unsat-core)
(pop 1)
(push 1)
(assert (not (=> (and
(<= n 2)
(>= n (- 0 2))
(<= 0 2)
(>= 0 (- 0 2))
(<= n 2)
(>= n (- 0 2))
(<= (+ n 0) 2)
(>= (+ n 0) (- 0 2))
(<= x@0 2)
(>= x@0 (- 0 2))
(<= y@0 2)
(>= y@0 (- 0 2))
(<= n 2)
(>= n (- 0 2))
(<= (+ x@0 y@0) 2)
(>= (+ x@0 y@0) (- 0 2))
(<= x@1 2)
(>= x@1 (- 0 2))
(<= y@1 2)
(>= y@1 (- 0 2))
(<= n 2)
(>= n (- 0 2))
(<= (+ x@1 y@1) 2)
(>= (+ x@1 y@1) (- 0 2))) (=> (and
(=> AbsHoudiniConstant0 (<= 0 0))
(=> (<= 0 0) AbsHoudiniConstant0)
(=> AbsHoudiniConstant1 (<= y@0 0))
(=> (<= y@0 0) AbsHoudiniConstant1)
(=> AbsHoudiniConstant2 (<= y@1 0))
(=> (<= y@1 0) AbsHoudiniConstant2)) mainMacro))))
(check-sat)
(labels)
(get-model)
(get-value ((+ x@0 y@0)))
(get-value ((+ x@0 y@0)))
(assert %lbl%@227)
(check-sat)
(labels)
(get-model)
(get-value ((+ x@0 y@0)))
(get-value ((+ x@1 y@1)))
(get-value ((+ x@0 y@0)))
(get-value ((+ x@1 y@1)))
(assert %lbl%@259)
(check-sat)
(pop 1)
(push 1)
(define-fun mainNegMacro2 () Bool (let ((anon3_LoopDone_correct@@0 (=> (! (and %lbl%+94 true) :lblpos +94) (=> (>= 0 x@0) (and
(! (or %lbl%@227 (=> true (= y@0 n))) :lblneg @227)
(=> (=> true (= y@0 n)) true))))))
(let ((anon3_LoopHead_correct@@0 (=> (! (and %lbl%+90 true) :lblpos +90) (=> (! (and %lbl%+212 AbsHoudiniConstant1) :lblpos +212) anon3_LoopDone_correct@@0))))
anon3_LoopHead_correct@@0)))
(assert mainNegMacro2)
(assert (and (not %lbl%@227) %lbl%+90 %lbl%+212 %lbl%+94))
(declare-const p0 Bool)
(assert (=> p0 (= x@0 0)))
(declare-const p1 Bool)
(assert (=> p1 (= y@0 (- 0 2))))
(declare-const p2 Bool)
(assert (=> p2 (= n 0)))
(assert  (and
(=> AbsHoudiniConstant0 (<= 0 0))
(=> (<= 0 0) AbsHoudiniConstant0)
(=> AbsHoudiniConstant1 (<= y@0 0))
(=> (<= y@0 0) AbsHoudiniConstant1)
(=> AbsHoudiniConstant2 (<= y@1 0))
(=> (<= y@1 0) AbsHoudiniConstant2)) )
(check-sat p0 p1 p2 )
(get-unsat-core)
(pop 1)
(push 1)
(assert (not (=> (and
(<= n 2)
(>= n (- 0 2))
(<= 0 2)
(>= 0 (- 0 2))
(<= n 2)
(>= n (- 0 2))
(<= (+ n 0) 2)
(>= (+ n 0) (- 0 2))
(<= x@0 2)
(>= x@0 (- 0 2))
(<= y@0 2)
(>= y@0 (- 0 2))
(<= n 2)
(>= n (- 0 2))
(<= (+ x@0 y@0) 2)
(>= (+ x@0 y@0) (- 0 2))
(<= x@1 2)
(>= x@1 (- 0 2))
(<= y@1 2)
(>= y@1 (- 0 2))
(<= n 2)
(>= n (- 0 2))
(<= (+ x@1 y@1) 2)
(>= (+ x@1 y@1) (- 0 2))) (=> (and
(=> AbsHoudiniConstant0 (and
(< (- 0 2) 0)
(<= (+ n (+ n 0)) 0)))
(=> (and
(< (- 0 2) 0)
(<= (+ n (+ n 0)) 0)) AbsHoudiniConstant0)
(=> AbsHoudiniConstant1 (and
(< (- 0 2) y@0)
(<= (+ n (+ x@0 y@0)) 0)))
(=> (and
(< (- 0 2) y@0)
(<= (+ n (+ x@0 y@0)) 0)) AbsHoudiniConstant1)
(=> AbsHoudiniConstant2 (and
(< (- 0 2) y@1)
(<= (+ n (+ x@1 y@1)) 0)))
(=> (and
(< (- 0 2) y@1)
(<= (+ n (+ x@1 y@1)) 0)) AbsHoudiniConstant2)) mainMacro))))
(check-sat)
(labels)
(get-model)
(get-value ((+ n 0)))
(get-value ((+ n 0)))
(assert %lbl%@196)
(check-sat)
(labels)
(get-model)
(get-value ((+ x@0 y@0)))
(get-value ((+ x@0 y@0)))
(assert %lbl%@227)
(check-sat)
(pop 1)
(push 1)
(define-fun mainPosMacro3 () Bool (let ((anon0_correct@@0 (=> (! (and %lbl%+88 true) :lblpos +88) (=> (>= n 0) (and
(! (or %lbl%@196 (=> true AbsHoudiniConstant0)) :lblneg @196)
(=> (=> true AbsHoudiniConstant0) true))))))
(let ((PreconditionGeneratedEntry_correct@@0 (=> (! (and %lbl%+166 true) :lblpos +166) anon0_correct@@0)))
PreconditionGeneratedEntry_correct@@0)))
(assert mainPosMacro3)
(assert (and (not %lbl%@196) %lbl%+166 %lbl%+88))
(declare-const p0 Bool)
(assert (=> p0 (= n 2)))
(assert  (and
(=> AbsHoudiniConstant0 (and
(< (- 0 2) 0)
(<= (+ n (+ n 0)) 0)))
(=> (and
(< (- 0 2) 0)
(<= (+ n (+ n 0)) 0)) AbsHoudiniConstant0)
(=> AbsHoudiniConstant1 (and
(< (- 0 2) y@0)
(<= (+ n (+ x@0 y@0)) 0)))
(=> (and
(< (- 0 2) y@0)
(<= (+ n (+ x@0 y@0)) 0)) AbsHoudiniConstant1)
(=> AbsHoudiniConstant2 (and
(< (- 0 2) y@1)
(<= (+ n (+ x@1 y@1)) 0)))
(=> (and
(< (- 0 2) y@1)
(<= (+ n (+ x@1 y@1)) 0)) AbsHoudiniConstant2)) )
(check-sat p0 )
(get-unsat-core)
(pop 1)
(push 1)
(define-fun mainNegMacro4 () Bool (let ((anon3_LoopDone_correct@@0 (=> (! (and %lbl%+94 true) :lblpos +94) (=> (>= 0 x@0) (and
(! (or %lbl%@227 (=> true (= y@0 n))) :lblneg @227)
(=> (=> true (= y@0 n)) true))))))
(let ((anon3_LoopHead_correct@@0 (=> (! (and %lbl%+90 true) :lblpos +90) (=> (! (and %lbl%+212 AbsHoudiniConstant1) :lblpos +212) anon3_LoopDone_correct@@0))))
anon3_LoopHead_correct@@0)))
(assert mainNegMacro4)
(assert (and (not %lbl%@227) %lbl%+90 %lbl%+212 %lbl%+94))
(declare-const p0 Bool)
(assert (=> p0 (= x@0 (- 0 1))))
(declare-const p1 Bool)
(assert (=> p1 (= y@0 1)))
(declare-const p2 Bool)
(assert (=> p2 (= n 0)))
(assert  (and
(=> AbsHoudiniConstant0 (and
(< (- 0 2) 0)
(<= (+ n (+ n 0)) 0)))
(=> (and
(< (- 0 2) 0)
(<= (+ n (+ n 0)) 0)) AbsHoudiniConstant0)
(=> AbsHoudiniConstant1 (and
(< (- 0 2) y@0)
(<= (+ n (+ x@0 y@0)) 0)))
(=> (and
(< (- 0 2) y@0)
(<= (+ n (+ x@0 y@0)) 0)) AbsHoudiniConstant1)
(=> AbsHoudiniConstant2 (and
(< (- 0 2) y@1)
(<= (+ n (+ x@1 y@1)) 0)))
(=> (and
(< (- 0 2) y@1)
(<= (+ n (+ x@1 y@1)) 0)) AbsHoudiniConstant2)) )
(check-sat p0 p1 p2 )
(get-unsat-core)
(pop 1)
(push 1)
(assert (not (=> (and
(<= n 2)
(>= n (- 0 2))
(<= 0 2)
(>= 0 (- 0 2))
(<= n 2)
(>= n (- 0 2))
(<= (+ n 0) 2)
(>= (+ n 0) (- 0 2))
(<= x@0 2)
(>= x@0 (- 0 2))
(<= y@0 2)
(>= y@0 (- 0 2))
(<= n 2)
(>= n (- 0 2))
(<= (+ x@0 y@0) 2)
(>= (+ x@0 y@0) (- 0 2))
(<= x@1 2)
(>= x@1 (- 0 2))
(<= y@1 2)
(>= y@1 (- 0 2))
(<= n 2)
(>= n (- 0 2))
(<= (+ x@1 y@1) 2)
(>= (+ x@1 y@1) (- 0 2))) (=> (and
(=> AbsHoudiniConstant0 (or
(and
(<= n 0)
(< (- 0 1) n)
(< (- 0 2) 0)
(<= 0 1))
(< 0 n)))
(=> (or
(and
(<= n 0)
(< (- 0 1) n)
(< (- 0 2) 0)
(<= 0 1))
(< 0 n)) AbsHoudiniConstant0)
(=> AbsHoudiniConstant1 (or
(and
(<= n 0)
(< (- 0 1) x@0)
(< (- 0 2) y@0)
(<= y@0 1))
(< 0 n)))
(=> (or
(and
(<= n 0)
(< (- 0 1) x@0)
(< (- 0 2) y@0)
(<= y@0 1))
(< 0 n)) AbsHoudiniConstant1)
(=> AbsHoudiniConstant2 (or
(and
(<= n 0)
(< (- 0 1) x@1)
(< (- 0 2) y@1)
(<= y@1 1))
(< 0 n)))
(=> (or
(and
(<= n 0)
(< (- 0 1) x@1)
(< (- 0 2) y@1)
(<= y@1 1))
(< 0 n)) AbsHoudiniConstant2)) mainMacro))))
(check-sat)
(labels)
(get-model)
(get-value ((+ x@0 y@0)))
(get-value ((+ x@0 y@0)))
(assert %lbl%@227)
(check-sat)
(labels)
(get-model)
(get-value ((+ x@0 y@0)))
(get-value ((+ x@1 y@1)))
(get-value ((+ x@0 y@0)))
(get-value ((+ x@1 y@1)))
(assert %lbl%@259)
(check-sat)
(pop 1)
(push 1)
(define-fun mainNegMacro5 () Bool (let ((anon3_LoopDone_correct@@0 (=> (! (and %lbl%+94 true) :lblpos +94) (=> (>= 0 x@0) (and
(! (or %lbl%@227 (=> true (= y@0 n))) :lblneg @227)
(=> (=> true (= y@0 n)) true))))))
(let ((anon3_LoopHead_correct@@0 (=> (! (and %lbl%+90 true) :lblpos +90) (=> (! (and %lbl%+212 AbsHoudiniConstant1) :lblpos +212) anon3_LoopDone_correct@@0))))
anon3_LoopHead_correct@@0)))
(assert mainNegMacro5)
(assert (and (not %lbl%@227) %lbl%+90 %lbl%+212 %lbl%+94))
(declare-const p0 Bool)
(assert (=> p0 (= x@0 0)))
(declare-const p1 Bool)
(assert (=> p1 (= y@0 1)))
(declare-const p2 Bool)
(assert (=> p2 (= n 0)))
(assert  (and
(=> AbsHoudiniConstant0 (or
(and
(<= n 0)
(< (- 0 1) n)
(< (- 0 2) 0)
(<= 0 1))
(< 0 n)))
(=> (or
(and
(<= n 0)
(< (- 0 1) n)
(< (- 0 2) 0)
(<= 0 1))
(< 0 n)) AbsHoudiniConstant0)
(=> AbsHoudiniConstant1 (or
(and
(<= n 0)
(< (- 0 1) x@0)
(< (- 0 2) y@0)
(<= y@0 1))
(< 0 n)))
(=> (or
(and
(<= n 0)
(< (- 0 1) x@0)
(< (- 0 2) y@0)
(<= y@0 1))
(< 0 n)) AbsHoudiniConstant1)
(=> AbsHoudiniConstant2 (or
(and
(<= n 0)
(< (- 0 1) x@1)
(< (- 0 2) y@1)
(<= y@1 1))
(< 0 n)))
(=> (or
(and
(<= n 0)
(< (- 0 1) x@1)
(< (- 0 2) y@1)
(<= y@1 1))
(< 0 n)) AbsHoudiniConstant2)) )
(check-sat p0 p1 p2 )
(get-unsat-core)
(pop 1)
(push 1)
(assert (not (=> (and
(<= n 2)
(>= n (- 0 2))
(<= 0 2)
(>= 0 (- 0 2))
(<= n 2)
(>= n (- 0 2))
(<= (+ n 0) 2)
(>= (+ n 0) (- 0 2))
(<= x@0 2)
(>= x@0 (- 0 2))
(<= y@0 2)
(>= y@0 (- 0 2))
(<= n 2)
(>= n (- 0 2))
(<= (+ x@0 y@0) 2)
(>= (+ x@0 y@0) (- 0 2))
(<= x@1 2)
(>= x@1 (- 0 2))
(<= y@1 2)
(>= y@1 (- 0 2))
(<= n 2)
(>= n (- 0 2))
(<= (+ x@1 y@1) 2)
(>= (+ x@1 y@1) (- 0 2))) (=> (and
(=> AbsHoudiniConstant0 (or
(and
(<= n 0)
(<= 0 0)
(< (- 0 2) 0))
(< 0 n)))
(=> (or
(and
(<= n 0)
(<= 0 0)
(< (- 0 2) 0))
(< 0 n)) AbsHoudiniConstant0)
(=> AbsHoudiniConstant1 (or
(and
(<= n 0)
(<= y@0 0)
(< (- 0 2) y@0))
(< 0 n)))
(=> (or
(and
(<= n 0)
(<= y@0 0)
(< (- 0 2) y@0))
(< 0 n)) AbsHoudiniConstant1)
(=> AbsHoudiniConstant2 (or
(and
(<= n 0)
(<= y@1 0)
(< (- 0 2) y@1))
(< 0 n)))
(=> (or
(and
(<= n 0)
(<= y@1 0)
(< (- 0 2) y@1))
(< 0 n)) AbsHoudiniConstant2)) mainMacro))))
(check-sat)
(labels)
(get-model)
(get-value ((+ x@0 y@0)))
(get-value ((+ x@0 y@0)))
(assert %lbl%@227)
(check-sat)
(labels)
(get-model)
(get-value ((+ x@0 y@0)))
(get-value ((+ x@1 y@1)))
(get-value ((+ x@0 y@0)))
(get-value ((+ x@1 y@1)))
(assert %lbl%@259)
(check-sat)
(pop 1)
(push 1)
(define-fun mainNegMacro6 () Bool (let ((anon3_LoopDone_correct@@0 (=> (! (and %lbl%+94 true) :lblpos +94) (=> (>= 0 x@0) (and
(! (or %lbl%@227 (=> true (= y@0 n))) :lblneg @227)
(=> (=> true (= y@0 n)) true))))))
(let ((anon3_LoopHead_correct@@0 (=> (! (and %lbl%+90 true) :lblpos +90) (=> (! (and %lbl%+212 AbsHoudiniConstant1) :lblpos +212) anon3_LoopDone_correct@@0))))
anon3_LoopHead_correct@@0)))
(assert mainNegMacro6)
(assert (and (not %lbl%@227) %lbl%+90 %lbl%+212 %lbl%+94))
(declare-const p0 Bool)
(assert (=> p0 (= x@0 (- 0 1))))
(declare-const p1 Bool)
(assert (=> p1 (= y@0 (- 0 1))))
(declare-const p2 Bool)
(assert (=> p2 (= n 0)))
(assert  (and
(=> AbsHoudiniConstant0 (or
(and
(<= n 0)
(<= 0 0)
(< (- 0 2) 0))
(< 0 n)))
(=> (or
(and
(<= n 0)
(<= 0 0)
(< (- 0 2) 0))
(< 0 n)) AbsHoudiniConstant0)
(=> AbsHoudiniConstant1 (or
(and
(<= n 0)
(<= y@0 0)
(< (- 0 2) y@0))
(< 0 n)))
(=> (or
(and
(<= n 0)
(<= y@0 0)
(< (- 0 2) y@0))
(< 0 n)) AbsHoudiniConstant1)
(=> AbsHoudiniConstant2 (or
(and
(<= n 0)
(<= y@1 0)
(< (- 0 2) y@1))
(< 0 n)))
(=> (or
(and
(<= n 0)
(<= y@1 0)
(< (- 0 2) y@1))
(< 0 n)) AbsHoudiniConstant2)) )
(check-sat p0 p1 p2 )
(get-unsat-core)
(pop 1)
(push 1)
(assert (not (=> (and
(<= n 2)
(>= n (- 0 2))
(<= 0 2)
(>= 0 (- 0 2))
(<= n 2)
(>= n (- 0 2))
(<= (+ n 0) 2)
(>= (+ n 0) (- 0 2))
(<= x@0 2)
(>= x@0 (- 0 2))
(<= y@0 2)
(>= y@0 (- 0 2))
(<= n 2)
(>= n (- 0 2))
(<= (+ x@0 y@0) 2)
(>= (+ x@0 y@0) (- 0 2))
(<= x@1 2)
(>= x@1 (- 0 2))
(<= y@1 2)
(>= y@1 (- 0 2))
(<= n 2)
(>= n (- 0 2))
(<= (+ x@1 y@1) 2)
(>= (+ x@1 y@1) (- 0 2))) (=> (and
(=> AbsHoudiniConstant0 (or
(and
(<= n 0)
(<= (+ n 0) 0)
(< (- 0 1) (+ n (+ n 0))))
(< 0 n)))
(=> (or
(and
(<= n 0)
(<= (+ n 0) 0)
(< (- 0 1) (+ n (+ n 0))))
(< 0 n)) AbsHoudiniConstant0)
(=> AbsHoudiniConstant1 (or
(and
(<= n 0)
(<= (+ x@0 y@0) 0)
(< (- 0 1) (+ x@0 (+ x@0 y@0))))
(< 0 n)))
(=> (or
(and
(<= n 0)
(<= (+ x@0 y@0) 0)
(< (- 0 1) (+ x@0 (+ x@0 y@0))))
(< 0 n)) AbsHoudiniConstant1)
(=> AbsHoudiniConstant2 (or
(and
(<= n 0)
(<= (+ x@1 y@1) 0)
(< (- 0 1) (+ x@1 (+ x@1 y@1))))
(< 0 n)))
(=> (or
(and
(<= n 0)
(<= (+ x@1 y@1) 0)
(< (- 0 1) (+ x@1 (+ x@1 y@1))))
(< 0 n)) AbsHoudiniConstant2)) mainMacro))))
(check-sat)
(labels)
(get-model)
(get-value ((+ x@0 y@0)))
(get-value ((+ x@0 y@0)))
(assert %lbl%@227)
(check-sat)
(labels)
(get-model)
(get-value ((+ x@0 y@0)))
(get-value ((+ x@1 y@1)))
(get-value ((+ x@0 y@0)))
(get-value ((+ x@1 y@1)))
(assert %lbl%@259)
(check-sat)
(pop 1)
(push 1)
(define-fun mainNegMacro7 () Bool (let ((anon3_LoopDone_correct@@0 (=> (! (and %lbl%+94 true) :lblpos +94) (=> (>= 0 x@0) (and
(! (or %lbl%@227 (=> true (= y@0 n))) :lblneg @227)
(=> (=> true (= y@0 n)) true))))))
(let ((anon3_LoopHead_correct@@0 (=> (! (and %lbl%+90 true) :lblpos +90) (=> (! (and %lbl%+212 AbsHoudiniConstant1) :lblpos +212) anon3_LoopDone_correct@@0))))
anon3_LoopHead_correct@@0)))
(assert mainNegMacro7)
(assert (and (not %lbl%@227) %lbl%+90 %lbl%+212 %lbl%+94))
(declare-const p0 Bool)
(assert (=> p0 (= x@0 (- 0 1))))
(declare-const p1 Bool)
(assert (=> p1 (= y@0 2)))
(declare-const p2 Bool)
(assert (=> p2 (= n 1)))
(assert  (and
(=> AbsHoudiniConstant0 (or
(and
(<= n 0)
(<= (+ n 0) 0)
(< (- 0 1) (+ n (+ n 0))))
(< 0 n)))
(=> (or
(and
(<= n 0)
(<= (+ n 0) 0)
(< (- 0 1) (+ n (+ n 0))))
(< 0 n)) AbsHoudiniConstant0)
(=> AbsHoudiniConstant1 (or
(and
(<= n 0)
(<= (+ x@0 y@0) 0)
(< (- 0 1) (+ x@0 (+ x@0 y@0))))
(< 0 n)))
(=> (or
(and
(<= n 0)
(<= (+ x@0 y@0) 0)
(< (- 0 1) (+ x@0 (+ x@0 y@0))))
(< 0 n)) AbsHoudiniConstant1)
(=> AbsHoudiniConstant2 (or
(and
(<= n 0)
(<= (+ x@1 y@1) 0)
(< (- 0 1) (+ x@1 (+ x@1 y@1))))
(< 0 n)))
(=> (or
(and
(<= n 0)
(<= (+ x@1 y@1) 0)
(< (- 0 1) (+ x@1 (+ x@1 y@1))))
(< 0 n)) AbsHoudiniConstant2)) )
(check-sat p0 p1 p2 )
(get-unsat-core)
(pop 1)
(push 1)
(assert (not (=> (and
(<= n 2)
(>= n (- 0 2))
(<= 0 2)
(>= 0 (- 0 2))
(<= n 2)
(>= n (- 0 2))
(<= (+ n 0) 2)
(>= (+ n 0) (- 0 2))
(<= x@0 2)
(>= x@0 (- 0 2))
(<= y@0 2)
(>= y@0 (- 0 2))
(<= n 2)
(>= n (- 0 2))
(<= (+ x@0 y@0) 2)
(>= (+ x@0 y@0) (- 0 2))
(<= x@1 2)
(>= x@1 (- 0 2))
(<= y@1 2)
(>= y@1 (- 0 2))
(<= n 2)
(>= n (- 0 2))
(<= (+ x@1 y@1) 2)
(>= (+ x@1 y@1) (- 0 2))) (=> (and
(=> AbsHoudiniConstant0 (or
(and
(<= n 1)
(<= n 0)
(< (- 0 1) n)
(<= (+ n 0) 0)
(<= (- n (+ n 0)) 0))
(< 1 n)))
(=> (or
(and
(<= n 1)
(<= n 0)
(< (- 0 1) n)
(<= (+ n 0) 0)
(<= (- n (+ n 0)) 0))
(< 1 n)) AbsHoudiniConstant0)
(=> AbsHoudiniConstant1 (or
(and
(<= n 1)
(<= n 0)
(< (- 0 1) x@0)
(<= (+ x@0 y@0) 0)
(<= (- x@0 (+ x@0 y@0)) 0))
(< 1 n)))
(=> (or
(and
(<= n 1)
(<= n 0)
(< (- 0 1) x@0)
(<= (+ x@0 y@0) 0)
(<= (- x@0 (+ x@0 y@0)) 0))
(< 1 n)) AbsHoudiniConstant1)
(=> AbsHoudiniConstant2 (or
(and
(<= n 1)
(<= n 0)
(< (- 0 1) x@1)
(<= (+ x@1 y@1) 0)
(<= (- x@1 (+ x@1 y@1)) 0))
(< 1 n)))
(=> (or
(and
(<= n 1)
(<= n 0)
(< (- 0 1) x@1)
(<= (+ x@1 y@1) 0)
(<= (- x@1 (+ x@1 y@1)) 0))
(< 1 n)) AbsHoudiniConstant2)) mainMacro))))
(check-sat)
(labels)
(get-model)
(get-value ((+ n 0)))
(get-value ((+ n 0)))
(assert %lbl%@196)
(check-sat)
(labels)
(get-model)
(get-value ((+ x@0 y@0)))
(get-value ((+ x@0 y@0)))
(assert %lbl%@227)
(check-sat)
(pop 1)
(push 1)
(define-fun mainPosMacro8 () Bool (let ((anon0_correct@@0 (=> (! (and %lbl%+88 true) :lblpos +88) (=> (>= n 0) (and
(! (or %lbl%@196 (=> true AbsHoudiniConstant0)) :lblneg @196)
(=> (=> true AbsHoudiniConstant0) true))))))
(let ((PreconditionGeneratedEntry_correct@@0 (=> (! (and %lbl%+166 true) :lblpos +166) anon0_correct@@0)))
PreconditionGeneratedEntry_correct@@0)))
(assert mainPosMacro8)
(assert (and (not %lbl%@196) %lbl%+166 %lbl%+88))
(declare-const p0 Bool)
(assert (=> p0 (= n 1)))
(assert  (and
(=> AbsHoudiniConstant0 (or
(and
(<= n 1)
(<= n 0)
(< (- 0 1) n)
(<= (+ n 0) 0)
(<= (- n (+ n 0)) 0))
(< 1 n)))
(=> (or
(and
(<= n 1)
(<= n 0)
(< (- 0 1) n)
(<= (+ n 0) 0)
(<= (- n (+ n 0)) 0))
(< 1 n)) AbsHoudiniConstant0)
(=> AbsHoudiniConstant1 (or
(and
(<= n 1)
(<= n 0)
(< (- 0 1) x@0)
(<= (+ x@0 y@0) 0)
(<= (- x@0 (+ x@0 y@0)) 0))
(< 1 n)))
(=> (or
(and
(<= n 1)
(<= n 0)
(< (- 0 1) x@0)
(<= (+ x@0 y@0) 0)
(<= (- x@0 (+ x@0 y@0)) 0))
(< 1 n)) AbsHoudiniConstant1)
(=> AbsHoudiniConstant2 (or
(and
(<= n 1)
(<= n 0)
(< (- 0 1) x@1)
(<= (+ x@1 y@1) 0)
(<= (- x@1 (+ x@1 y@1)) 0))
(< 1 n)))
(=> (or
(and
(<= n 1)
(<= n 0)
(< (- 0 1) x@1)
(<= (+ x@1 y@1) 0)
(<= (- x@1 (+ x@1 y@1)) 0))
(< 1 n)) AbsHoudiniConstant2)) )
(check-sat p0 )
(get-unsat-core)
(pop 1)
(push 1)
(define-fun mainNegMacro9 () Bool (let ((anon3_LoopDone_correct@@0 (=> (! (and %lbl%+94 true) :lblpos +94) (=> (>= 0 x@0) (and
(! (or %lbl%@227 (=> true (= y@0 n))) :lblneg @227)
(=> (=> true (= y@0 n)) true))))))
(let ((anon3_LoopHead_correct@@0 (=> (! (and %lbl%+90 true) :lblpos +90) (=> (! (and %lbl%+212 AbsHoudiniConstant1) :lblpos +212) anon3_LoopDone_correct@@0))))
anon3_LoopHead_correct@@0)))
(assert mainNegMacro9)
(assert (and (not %lbl%@227) %lbl%+90 %lbl%+212 %lbl%+94))
(declare-const p0 Bool)
(assert (=> p0 (= x@0 0)))
(declare-const p1 Bool)
(assert (=> p1 (= y@0 1)))
(declare-const p2 Bool)
(assert (=> p2 (= n 2)))
(assert  (and
(=> AbsHoudiniConstant0 (or
(and
(<= n 1)
(<= n 0)
(< (- 0 1) n)
(<= (+ n 0) 0)
(<= (- n (+ n 0)) 0))
(< 1 n)))
(=> (or
(and
(<= n 1)
(<= n 0)
(< (- 0 1) n)
(<= (+ n 0) 0)
(<= (- n (+ n 0)) 0))
(< 1 n)) AbsHoudiniConstant0)
(=> AbsHoudiniConstant1 (or
(and
(<= n 1)
(<= n 0)
(< (- 0 1) x@0)
(<= (+ x@0 y@0) 0)
(<= (- x@0 (+ x@0 y@0)) 0))
(< 1 n)))
(=> (or
(and
(<= n 1)
(<= n 0)
(< (- 0 1) x@0)
(<= (+ x@0 y@0) 0)
(<= (- x@0 (+ x@0 y@0)) 0))
(< 1 n)) AbsHoudiniConstant1)
(=> AbsHoudiniConstant2 (or
(and
(<= n 1)
(<= n 0)
(< (- 0 1) x@1)
(<= (+ x@1 y@1) 0)
(<= (- x@1 (+ x@1 y@1)) 0))
(< 1 n)))
(=> (or
(and
(<= n 1)
(<= n 0)
(< (- 0 1) x@1)
(<= (+ x@1 y@1) 0)
(<= (- x@1 (+ x@1 y@1)) 0))
(< 1 n)) AbsHoudiniConstant2)) )
(check-sat p0 p1 p2 )
(get-unsat-core)
(pop 1)
(push 1)
(assert (not (=> (and
(<= n 2)
(>= n (- 0 2))
(<= 0 2)
(>= 0 (- 0 2))
(<= n 2)
(>= n (- 0 2))
(<= (+ n 0) 2)
(>= (+ n 0) (- 0 2))
(<= x@0 2)
(>= x@0 (- 0 2))
(<= y@0 2)
(>= y@0 (- 0 2))
(<= n 2)
(>= n (- 0 2))
(<= (+ x@0 y@0) 2)
(>= (+ x@0 y@0) (- 0 2))
(<= x@1 2)
(>= x@1 (- 0 2))
(<= y@1 2)
(>= y@1 (- 0 2))
(<= n 2)
(>= n (- 0 2))
(<= (+ x@1 y@1) 2)
(>= (+ x@1 y@1) (- 0 2))) (=> (and
(=> AbsHoudiniConstant0 (and
(<= (- 0 n) 0)
(<= (- n (+ n 0)) 0)
(< (- 0 1) (- n (+ n 0)))))
(=> (and
(<= (- 0 n) 0)
(<= (- n (+ n 0)) 0)
(< (- 0 1) (- n (+ n 0)))) AbsHoudiniConstant0)
(=> AbsHoudiniConstant1 (and
(<= (- y@0 n) 0)
(<= (- n (+ x@0 y@0)) 0)
(< (- 0 1) (- n (+ x@0 y@0)))))
(=> (and
(<= (- y@0 n) 0)
(<= (- n (+ x@0 y@0)) 0)
(< (- 0 1) (- n (+ x@0 y@0)))) AbsHoudiniConstant1)
(=> AbsHoudiniConstant2 (and
(<= (- y@1 n) 0)
(<= (- n (+ x@1 y@1)) 0)
(< (- 0 1) (- n (+ x@1 y@1)))))
(=> (and
(<= (- y@1 n) 0)
(<= (- n (+ x@1 y@1)) 0)
(< (- 0 1) (- n (+ x@1 y@1)))) AbsHoudiniConstant2)) mainMacro))))
(check-sat)
(pop 1)
(push 1)
(assert (not (=> (and
(<= n 6)
(>= n (- 0 6))
(<= 0 6)
(>= 0 (- 0 6))
(<= n 6)
(>= n (- 0 6))
(<= (+ n 0) 6)
(>= (+ n 0) (- 0 6))
(<= x@0 6)
(>= x@0 (- 0 6))
(<= y@0 6)
(>= y@0 (- 0 6))
(<= n 6)
(>= n (- 0 6))
(<= (+ x@0 y@0) 6)
(>= (+ x@0 y@0) (- 0 6))
(<= x@1 6)
(>= x@1 (- 0 6))
(<= y@1 6)
(>= y@1 (- 0 6))
(<= n 6)
(>= n (- 0 6))
(<= (+ x@1 y@1) 6)
(>= (+ x@1 y@1) (- 0 6))) (=> (and
(=> AbsHoudiniConstant0 (and
(<= (- 0 n) 0)
(<= (- n (+ n 0)) 0)
(< (- 0 1) (- n (+ n 0)))))
(=> (and
(<= (- 0 n) 0)
(<= (- n (+ n 0)) 0)
(< (- 0 1) (- n (+ n 0)))) AbsHoudiniConstant0)
(=> AbsHoudiniConstant1 (and
(<= (- y@0 n) 0)
(<= (- n (+ x@0 y@0)) 0)
(< (- 0 1) (- n (+ x@0 y@0)))))
(=> (and
(<= (- y@0 n) 0)
(<= (- n (+ x@0 y@0)) 0)
(< (- 0 1) (- n (+ x@0 y@0)))) AbsHoudiniConstant1)
(=> AbsHoudiniConstant2 (and
(<= (- y@1 n) 0)
(<= (- n (+ x@1 y@1)) 0)
(< (- 0 1) (- n (+ x@1 y@1)))))
(=> (and
(<= (- y@1 n) 0)
(<= (- n (+ x@1 y@1)) 0)
(< (- 0 1) (- n (+ x@1 y@1)))) AbsHoudiniConstant2)) mainMacro))))
(check-sat)
(pop 1)
(push 1)
(assert (not (=> (and
(<= n 10)
(>= n (- 0 10))
(<= 0 10)
(>= 0 (- 0 10))
(<= n 10)
(>= n (- 0 10))
(<= (+ n 0) 10)
(>= (+ n 0) (- 0 10))
(<= x@0 10)
(>= x@0 (- 0 10))
(<= y@0 10)
(>= y@0 (- 0 10))
(<= n 10)
(>= n (- 0 10))
(<= (+ x@0 y@0) 10)
(>= (+ x@0 y@0) (- 0 10))
(<= x@1 10)
(>= x@1 (- 0 10))
(<= y@1 10)
(>= y@1 (- 0 10))
(<= n 10)
(>= n (- 0 10))
(<= (+ x@1 y@1) 10)
(>= (+ x@1 y@1) (- 0 10))) (=> (and
(=> AbsHoudiniConstant0 (and
(<= (- 0 n) 0)
(<= (- n (+ n 0)) 0)
(< (- 0 1) (- n (+ n 0)))))
(=> (and
(<= (- 0 n) 0)
(<= (- n (+ n 0)) 0)
(< (- 0 1) (- n (+ n 0)))) AbsHoudiniConstant0)
(=> AbsHoudiniConstant1 (and
(<= (- y@0 n) 0)
(<= (- n (+ x@0 y@0)) 0)
(< (- 0 1) (- n (+ x@0 y@0)))))
(=> (and
(<= (- y@0 n) 0)
(<= (- n (+ x@0 y@0)) 0)
(< (- 0 1) (- n (+ x@0 y@0)))) AbsHoudiniConstant1)
(=> AbsHoudiniConstant2 (and
(<= (- y@1 n) 0)
(<= (- n (+ x@1 y@1)) 0)
(< (- 0 1) (- n (+ x@1 y@1)))))
(=> (and
(<= (- y@1 n) 0)
(<= (- n (+ x@1 y@1)) 0)
(< (- 0 1) (- n (+ x@1 y@1)))) AbsHoudiniConstant2)) mainMacro))))
(check-sat)
(pop 1)
(push 1)
(assert (not (=> (and
(<= n 1000000)
(>= n (- 0 1000000))
(<= 0 1000000)
(>= 0 (- 0 1000000))
(<= n 1000000)
(>= n (- 0 1000000))
(<= (+ n 0) 1000000)
(>= (+ n 0) (- 0 1000000))
(<= x@0 1000000)
(>= x@0 (- 0 1000000))
(<= y@0 1000000)
(>= y@0 (- 0 1000000))
(<= n 1000000)
(>= n (- 0 1000000))
(<= (+ x@0 y@0) 1000000)
(>= (+ x@0 y@0) (- 0 1000000))
(<= x@1 1000000)
(>= x@1 (- 0 1000000))
(<= y@1 1000000)
(>= y@1 (- 0 1000000))
(<= n 1000000)
(>= n (- 0 1000000))
(<= (+ x@1 y@1) 1000000)
(>= (+ x@1 y@1) (- 0 1000000))) (=> (and
(=> AbsHoudiniConstant0 (and
(<= (- 0 n) 0)
(<= (- n (+ n 0)) 0)
(< (- 0 1) (- n (+ n 0)))))
(=> (and
(<= (- 0 n) 0)
(<= (- n (+ n 0)) 0)
(< (- 0 1) (- n (+ n 0)))) AbsHoudiniConstant0)
(=> AbsHoudiniConstant1 (and
(<= (- y@0 n) 0)
(<= (- n (+ x@0 y@0)) 0)
(< (- 0 1) (- n (+ x@0 y@0)))))
(=> (and
(<= (- y@0 n) 0)
(<= (- n (+ x@0 y@0)) 0)
(< (- 0 1) (- n (+ x@0 y@0)))) AbsHoudiniConstant1)
(=> AbsHoudiniConstant2 (and
(<= (- y@1 n) 0)
(<= (- n (+ x@1 y@1)) 0)
(< (- 0 1) (- n (+ x@1 y@1)))))
(=> (and
(<= (- y@1 n) 0)
(<= (- n (+ x@1 y@1)) 0)
(< (- 0 1) (- n (+ x@1 y@1)))) AbsHoudiniConstant2)) mainMacro))))
(check-sat)
